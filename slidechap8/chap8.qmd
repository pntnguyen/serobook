---
title: "8.2.1 Penalized Likelihood Framework"
format: revealjs
editor: visual
echo: true
---

## 8.2.1.1 Smoothing spline

```{r}
parvovirus<-read.table("/home/thinh/Documents/serobook/code in the book/Chapter4/VZV-B19-BE.dat",header=T)

subset<-(parvovirus$age>0.5)&(parvovirus$age<76)&(!is.na(parvovirus$age))&!is.na(parvovirus$parvores)

parvovirus<-parvovirus[subset,]
head(parvovirus)
y<-parvovirus$parvores[order(parvovirus$age)]
a<-parvovirus$age[order(parvovirus$age)]
s<-parvovirus$sex[order(parvovirus$age)]

grid<-sort(unique(round(a)))
neg<-table(y,round(a))[1,]
pos<-table(y,round(a))[2,]
tot<-neg+pos
```

## function

```{r}
foi.num<-function(x,p)
{
grid<-sort(unique(x))    # using maximal sets of knots, i.e: all unique age values
pgrid<-(p[order(x)])[duplicated(sort(x))==F]
dp<-diff(pgrid)/diff(grid)
foi<-approx((grid[-1]+grid[-length(grid)])/2,dp,grid[c(-1,-length(grid))])$y/(1-pgrid[c(-1,-length(grid))])
return(list(grid=grid[c(-1,-length(grid))],foi=foi))
}
```

example

```{r}
K <- c(1,3,4,6,3,4,7)
P <- c(9,10,33,44,55,66,77)
P[order(K)]
K[-1]
K[-length(K)]
```

## function

```{r}
foi.num<-function(x,p)
{
grid<-sort(unique(x))    # using maximal sets of knots, i.e: all unique age values
pgrid<-(p[order(x)])[duplicated(sort(x))==F]
dp<-diff(pgrid)/diff(grid)
foi<-approx((grid[-1]+grid[-length(grid)])/2,dp,grid[c(-1,-length(grid))])$y/(1-pgrid[c(-1,-length(grid))])
return(list(grid=grid[c(-1,-length(grid))],foi=foi))
}
```

example

```{r}
K[c(-1,-length(K))]
```

## Select the smoothing parameter

Hastie and Tibshirani 
```{r}
BICf<-function(fit){return(fit$deviance+log(length(fit$y))*(fit$nl.df+2))}
```

Eilers and Marx (1996)

```{r}
AICme<-function(fit){return(fit$dev+2*(fit$eff.df))}

BICme<-function(fit){return(fit$dev+log((dim(fit$summary.predicted)[1]))*(fit$eff.df))}
```

Wood(2006)

```{r}
BICWood<-function(fit){return(fit$deviance+log(length(fit$y))*sum(fit$edf))}
```

## Smoothing splines

```{r}
library(gam)
out<-matrix(NA,ncol=3,nrow=100)
for (i in 1:100){
dfi<-1+0.5*i
fit.gam.logit.ht<-gam(y~s(a,df=dfi),family=binomial(link="logit"))
fit.gam.cloglog.ht<-gam(y~s(a,df=dfi),family=binomial(link="cloglog"))
out[i,]<-c(dfi,BICf(fit.gam.logit.ht),BICf(fit.gam.cloglog.ht))
}
```

result

```{r}
fit.gam.logit.ht<-gam(y~s(a,df=out[which.min(out[,2]),1]),family=binomial(link="logit"))
fit.gam.logit.ht$coefficients
```

```{r}
fit.gam.cloglog.ht<-gam(y~s(a,df=out[which.min(out[,3]),1]),family=binomial(link="cloglog"))
fit.gam.cloglog.ht$coefficients
```

##

B-splines

```{r}
"pspline.fit"<-
function(response, x.var, ps.intervals = 8, wts = NULL, degree = 3, order = 3, 
	link = "default", family = "gaussian", m.binomial = NULL, r.gamma = 
	NULL, lambda = 0, x.predicted = NULL, ridge.adj = 0.0001)
{y <- response
	x <- x.var
	if(missing(wts)) {
		wts <- rep(1, length(y))
	}
	parms <- pspline.checker(family, link, degree, order, ps.intervals, 
		lambda, ridge.adj, wts)
	family <- parms$family
	link <- parms$link
	q <- parms$degree
	d <- parms$order
	ridge.adj <- parms$ridge.adj
	lambda <- parms$lambda
	ndx <- parms$ps.intervals
	wts <- parms$wts
	if(missing(m.binomial)) {
		m.binomial <- rep(1, length(y))
	}
	if(missing(r.gamma)) {
		r.gamma <- rep(1, length(y))
	}
	n <- length(y)
	xl <- min(x)
	xr <- max(x)
	xmax <- xr + 0.01 * (xr - xl)
	xmin <- xl - 0.01 * (xr - xl)
	dx <- (xmax - xmin)/ndx
	knots <- seq(xmin - q * dx, xmax + q * dx, by = dx)
	b <- spline.des(knots, x, q + 1, 0 * x)$design
	n.col <- ncol(b)
	if(d < 0) {
		d <- min(3, (n.col - 1))
		warning(paste("penalty order cannot be negative: have used", d)
			)
	}
	if((d - n.col + 1) > 0) {
		d <- n.col - 1
		warning(paste("penalty order was too large: have used", d))
	}
	if(ridge.adj > 0) {
		nix.ridge <- rep(0, n.col)
		p.ridge <- sqrt(ridge.adj) * diag(rep(1, n.col))
	}
	p <- diag(n.col)
	if(d != 0) {
		for(j in 1:d) {
			p <- diff(p)
		}
	}
	p <- sqrt(lambda) * p
	nix <- rep(0, n.col - d)
	b <- as.matrix(b)
	ps.fit <- pspline.fitter(family, link, n.col, m.binomial, r.gamma, y, b,
		p, p.ridge, nix, nix.ridge, ridge.adj, wts)
	mu <- ps.fit$mu
	coef <- ps.fit$coef
	w <- ps.fit$w
	e <- 1e-009
	h <- hat(ps.fit$f$qr, intercept = F)[1:n]
	trace <- sum(h) - 1
	if(family == "binomial") {
		dev <- 2 * sum((y + e) * log((y + e)/(mu + e)) + (m.binomial - 
			y + e) * log((m.binomial - y + e)/(m.binomial - mu + e)
			))
		dispersion.parm <- 1
	}
	if(family == "poisson") {
		dev <- 2 * sum(y * log(y + e) - y - y * log(mu) + mu)
		dispersion.parm <- 1
	}
	if(family == "Gamma") {
		dev <- -2 * sum(r.gamma * (log((y + e)/mu) - ((y - mu)/mu)))
		ave.dev <- dev/n
		dispersion.parm <- (ave.dev * (6 + ave.dev))/(6 + 2 * ave.dev)
	}
	if(family == "gaussian") {
		dev <- sum(ps.fit$f$residuals^2)
		dispersion.parm <- dev/(n - trace)
	}
	aic <- dev + 2 * trace
	x.seq <- seq(xl, xr, length = 50)
	b.seq <- spline.des(knots, x.seq, q + 1, 0 * x.seq)$design
	w.aug <- c(w, (nix + 1))
	yhat <- b.seq %*% as.vector(ps.fit$coef)
	half.meat <- sqrt(c(w)) * b
	meat <- t(half.meat) %*% half.meat
	if(ridge.adj > 0) {
		bread <- solve(meat + t(p) %*% p + t(p.ridge) %*% p.ridge)
	}
	if(ridge.adj == 0) {
		bread <- solve(meat + t(p) %*% p)
	}
	half.sw <- half.meat %*% bread
	var.beta <- t(half.sw) %*% half.sw
	var.yhat <- b.seq %*% var.beta %*% t(b.seq)
	stdev.yhat <- as.vector(sqrt(diag(var.yhat)))
	stdev.yhat <- sqrt(dispersion.parm) * stdev.yhat
	pivot <- 2 * stdev.yhat
	upper <- yhat + pivot
	lower <- yhat - pivot
	summary.yhat <- cbind(lower, yhat, upper)
	if(link == "logit") {
		summary.yhat <- 1/(1 + exp( - summary.yhat))
	}
	if(link == "probit") {
		summary.yhat <- apply(summary.yhat, c(1, 2), pnorm)
	}
	if(link == "cloglog") {
		summary.yhat <- (1 - exp( - exp(summary.yhat)))
	}
	if(link == "loglog") {
		summary.yhat <- exp( - exp( - summary.yhat))
	}
	if(link == "sqrt") {
		summary.yhat <- summary.yhat^2
	}
	if(link == "log") {
		summary.yhat <- exp(summary.yhat)
	}
	if(link == "recipical") {
		summary.yhat <- 1/(summary.yhat)
	}
	if(family == "binomial" && mean(m.binomial) != 1) {
		matplot(x.seq, summary.yhat, type = "l", lty = c(2, 1, 2), xlab
			 = "regressor", ylab = "estimated mean", main = 
			"P-spline fit with twice std error bands")
	}
	if(mean(m.binomial) == 1) {
		matplot(x.seq, summary.yhat, type = "l", lty = c(2, 1, 2), xlab
			 = "regressor", ylab = "estimated mean", ylim = c(min(
			min(y), min(summary.yhat[, 1])), max(max(y), max(
			summary.yhat[, 3]))), main = 
			"P-spline fit with twice std error bands")
		matpoints(x, y, type = "p", pch = "O")
	}
	ps.predict <- NULL
	if(!missing(x.predicted)) {
		ps.predict <- pspline.predictor(x.predicted, knots, link, coef, 
			q, var.beta, dispersion.parm)
	}
	llist <- list()
	llist$family <- family
	llist$link <- link
	llist$ps.intervals <- ndx
	llist$order <- d
	llist$degree <- q
	llist$lambda <- lambda
	llist$aic <- aic
	llist$deviance <- dev
	llist$eff.df <- trace
	llist$df.resid <- n - trace
	llist$dispersion.param <- dispersion.parm
	llist$summary.predicted <- ps.predict$summary.pred
	llist$coef <- coef
	llist
}
```

````
me.fit.BIC<-pspline.fit(response=y,x.var=a,ps.intervals=20,degree=3,order=2,link="logit",family="binomial",lambda=out[which.min(out[,3]),1],x.predicted=a)
BICme(me.fit.BIC)
````


## 

Thin plate splines

```{r}
library(mgcv)
fit.gam.logit.tps<-gam(y~s(a,bs="tp"),family=binomial(link="logit"))
fit.gam.cloglog.tps<-gam(y~s(a,bs="tp"),family=binomial(link="cloglog"))
```

Cubic regression splines 

```{r}
fit.gam.logit.cr<-gam(y~s(a,bs="cr"),family=binomial(link="logit"))
fit.gam.cloglog.cr<-gam(y~s(a,bs="cr"),family=binomial(link="cloglog"))
```

##

```{r}
plot(grid,pos/tot,cex=0.02*tot,pch=1,xlab="age",ylab="sero-prevalence",xlim=c(0,72),ylim=c(-0.1,1))
lines(a,fit.gam.logit.ht$fitted.values,lty=1,lwd=2,col=1)
lines(a,fit.gam.cloglog.ht$fitted.values,lty=2,lwd=2,col=1)
h1<-foi.num(a,fit.gam.logit.ht$fitted.values)
lines(h1$grid,h1$foi,lty=1,lwd=2)
h2<-foi.num(a,fit.gam.cloglog.ht$fitted.values)
lines(h2$grid,h2$foi,lty=2,lwd=2)
axis(side=4,at=c(0.0,0.1,0.2,0.3,0.4))
mtext(side=4,"force-of-infection",las=3,line=1.5,cex=0.9)
```


