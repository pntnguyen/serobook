---
title: "note"
format: html
editor: visual
echo: true
---

```{r, message= FALSE}
devtools::install_github("OUCRU-Modelling/serosv")
library(serosv)
```

```{r}
rubella <- rubella_uk_1986_1987
rubella$neg <- rubella$tot - rubella$pos
a <- rubella$age
y <- rubella$pos/rubella$tot
```

## Farrington's model code in the book

```{r}
### Nonlinear 1
loglik1<-function(theta){
alpha<-abs(theta[1])
beta<-abs(theta[2])
gamma<-abs(theta[3])
p<-1-exp((alpha/beta)*a*exp(-beta*a)+1/beta*(alpha/beta-gamma)*(exp(-beta*a)-1)-gamma*a)
return(-sum(y*log(p)+(1-y)*(log(1-p))))
}
result<-abs(nlminb(c(0.1,0.1,0.1),loglik1)$par)
alphaopt<-result[1]
betaopt<-result[2]
gammaopt<-result[3]
p1<-function(a){1-exp((alphaopt/betaopt)*a*exp(-betaopt*a)+1/betaopt*(alphaopt/betaopt-gammaopt)*(exp(-betaopt*a)-1)-gammaopt*a)}
# BIC-value
2*nlminb(c(0.1,0.1,0.1),loglik1)$objective+log(length(y))*3
```

```{r}
### Nonlinear 2
loglik2<-function(theta){
alpha<-abs(theta[1])
beta<-abs(theta[2])
p<-1-exp((alpha/beta)*a*exp(-beta*a)+1/beta*(alpha/beta)*(exp(-beta*a)-1))
return(-sum(y*log(p)+(1-y)*(log(1-p))))
}
result<-abs(nlminb(c(0.1,0.1,0),loglik2)$par)
alphaopt<-result[1]
betaopt<-result[2]
p2<-function(a){1-exp((alphaopt/betaopt)*a*exp(-betaopt*a)+1/betaopt*(alphaopt/betaopt)*(exp(-betaopt*a)-1))}
# BIC-value
2*nlminb(c(0.1,0.1,0),loglik2)$objective+log(length(y))*2
```

```{r}
nlminb(c(0.1,0.1,0),loglik1)

nlminb(c(0.1,0.1,0),loglik2)

model <- suppressWarnings(farrington_model(
   rubella$age, rubella$pos, rubella$tot,
   start=list(alpha=0.1,beta=0.1,gamma=0)
   ))
model
```

```{r, message=FALSE}
### Farrington MODEL
library(tidyverse)

par(las=1,cex.axis=1.1,cex.lab=1.1,lwd=2,mgp=c(2, 0.5, 0),mar=c(3.1,3.1,3.1,3))

grid<-a
pos<-rubella$pos
tot<-rubella$tot

plot(grid,pos/tot,cex=0.015*tot,pch=1,xlab="age",ylab="seroprevalence",xlim=c(0,45),ylim=c(0,1)) + lines(a,p2(a),lty=4,lwd=2)
```

## Code in the book to find best fractional polynomial

```{r}
search.fracpoly.twoR<-function(y,tot,x,pow,mc){
     deviance<-deviance(glm(cbind(y,tot-y)~x+I(x^2), family="binomial"(link=logit)))
     mistake<-NULL

     for (i in 1: (length(pow))){
     for (j in i: (length(pow))){
          if(pow[i]==0){term1<-log(x)} else{term1<-(x)^(pow[i])}
          if(pow[j]==pow[i]){term2<-term1*log(x)} 
          else if(pow[j]==0){term2<-log(x)} 
          else{term2<-(x)^(pow[j])}
          glm.try<-glm(cbind(y,tot-y)~term1+term2, family="binomial"(link=logit))
	    print(c(pow[i],pow[j],deviance(glm.try),(sum(diff(predict(glm.try))<0)==0)))
          if(glm.try$converged==FALSE){mistake<-rbind(mistake, c(1,pow[i],pow[j]))}
          else{
               if(deviance(glm.try)<deviance){
                    if (((mc)&&(sum(diff(predict(glm.try))<0)==0))|(!mc)){
			     #print(c(mc,(sum(diff(predict(glm.try))<0)==0)))
                       deviance<-deviance(glm.try)
                       power<-c(pow[i],pow[j])
                    } 
                                   }
               }
                                     
      }
      }
     return(list(power=power, deviance=deviance, mistake=mistake))
}
search.fracpoly.twoR(rubella$pos,rubella$tot,rubella$age,seq(-2,3,0.1),mc= T)
```

![](hinh/1.png)
