---
title: "Chap 10 Gibbs sampling"
format: 
  html:
    page-layout: full
    embed-resources: true
editor: visual
echo: true
---

```{r}
library(rstan)
library(tidyverse)
```

rubella data

```{r}
rrr<-list(
  age=c(1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,11.5,12.5,13.5,14.5,
        15.5,16.5,17.5,18.5,19.5,20.5,21.5,22.5,23.5,24.5,25.5,26.5,27.5,
        28.5,29.5,30.5,31.5,32.5,33.5,34.5,35.5,36.5,37.5,38.5,39.5,40.5,41.5,42.5,43.5,44.5),
  posi=c(31,30,34,57,95,104,90,96,134,110,111,147,138,141,53,49,73,
         69,97,65,74,84,82,79,90,84,81,72,71,51,45,45,35,39,
         36,37,37,37,28,26,25,21,18,18),
  ni=c(206,146,168,189,219,195,164,145,180,160,148,178,177,165,67,58,81,
       79,111,76,82,101,88,85,94,91,89,76,79,56,52,48,37,41,40,38,39,41,30,27,25,22,19,18),
  Nage=44)
```

mumps data

```{r}
mmm2 <- list(
age=c(1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,11.5,12.5,13.5,14.5,
      15.5,16.5,17.5,18.5,19.5,20.5,21.5,22.5,23.5,24.5,25.5,26.5,27.5,
      28.5,29.5,30.5,31.5,32.5,33.5,34.5,35.5,36.5,37.5,38.5,39.5,40.5,41.5,42.5,43.5,44.5),
posi=c(56,48,137,195,290,255,236,211,271,276,259,301,296,345,112,112,142,
       186,202,156,155,200,166,165,179,171,175,147,137,114,117,99,95,80,
       77,65,63,69,46,61,55,42,37,39),
ni=c(407,292,332,368,421,330,294,258,312,304,282,321,313,366,116,121,148,
     196,211,159,160,204,170,170,180,178,179,150,147,120,122,104,95,82,
     78,67,65,72,47,62,56,43,37,40),
     Nage=44)
```

# 10.3.1 Nonlinear Hierarchical Model

## Farrington model with 3 parameters

```{r}
mcmc <- "
data {
  int<lower=1> Nage;           // Number of age groups
  vector[Nage] age;            // Age vector
  int<lower=0> posi[Nage];     // Number of positive cases
  int<lower=0> ni[Nage];       // Number of trials
}

parameters {
  real<lower=0.00001> alpha1;  // Parameter alpha1
  real<lower=0.00001> alpha2;  // Parameter alpha2
  real<lower=0.00001> alpha3;  // Parameter alpha3
  real<lower=0> tau_alpha1;    // Precision (inverse variance) of alpha1
  real<lower=0> tau_alpha2;    // Precision (inverse variance) of alpha2
  real<lower=0> tau_alpha3;    // Precision (inverse variance) of alpha3
  real mu_alpha1;              // Mean of normal prior for alpha1
  real mu_alpha2;              // Mean of normal prior for alpha2
  real mu_alpha3;              // Mean of normal prior for alpha3
}

transformed parameters {
  real<lower=0> sigma_alpha1;  // Standard deviation of alpha1
  real<lower=0> sigma_alpha2;  // Standard deviation of alpha2
  real<lower=0> sigma_alpha3;  // Standard deviation of alpha3
 
  sigma_alpha1 = sqrt(1 / tau_alpha1);
  sigma_alpha2 = sqrt(1 / tau_alpha2);
  sigma_alpha3 = sqrt(1 / tau_alpha3);
}

model {
  vector[Nage] theta;

  // Priors
  alpha1 ~ normal(mu_alpha1, sigma_alpha1);
  alpha2 ~ normal(mu_alpha2, sigma_alpha2);
  alpha3 ~ normal(mu_alpha3, sigma_alpha3);
  tau_alpha1 ~ gamma(0.01, 0.01);
  tau_alpha2 ~ gamma(0.01, 0.01);
  tau_alpha3 ~ gamma(0.01, 0.01);
  mu_alpha1 ~ normal(0, sqrt(1 / 0.0001));
  mu_alpha2 ~ normal(0, sqrt(1 / 0.0001));
  mu_alpha3 ~ normal(0, sqrt(1 / 0.0001));

  // Likelihood
  for (i in 1:Nage) {
    real eta;  // Declare eta as a real variable
    eta = (alpha1 / alpha2) * age[i] * exp(-alpha2 * age[i]) +
          (1 / alpha2) * ((alpha1 / alpha2) - alpha3) * (exp(-alpha2 * age[i]) - 1) -
          alpha3 * age[i];
    theta[i] = 1 - exp(eta);
    posi[i] ~ binomial(ni[i], theta[i]);

  }

}
"
```

Run sampling

```{r}
fit1 <- stan(
  model_code =  mcmc,  
  data = mmm2,    
  chains = 4,             
  warmup = 1500,          
  iter = 5000            
)
```

Posterior

```{r}
traceplot(fit1, pars = c("alpha1", "alpha2","alpha3"), inc_warmup = TRUE, nrow = 1)
```

```{r}
out <- print(summary(fit1)$summary)
alpha1 <- out["alpha1",c("mean")]
alpha2 <- out["alpha2",c("mean")]
alpha3 <- out["alpha3",c("mean")]
```

```{r}
theta <- data.frame( sp = rep (0,44),
                     foi = rep (0,44))

for (i in 1:44){
  theta$sp[i] = 1-exp((alpha1/alpha2)*mmm2$age[i]*exp(-alpha2*mmm2$age[i])+
                        (1/alpha2)*((alpha1/alpha2)-alpha3)*(exp(-alpha2*mmm2$age[i])-1)-alpha3*mmm2$age[i])
  theta$foi[i] = (alpha1*mmm2$age[i]-alpha3)*exp(-alpha2*mmm2$age[i])+alpha3
}
```

plot

```{r}
plot(mmm2$age,mmm2$posi/mmm2$ni,xlim=c(0,46),cex=0.01*mmm2$ni,xlab="age",ylab="proportion of seropositive",
     ylim=c(0,1),lwd=2)
lines(mmm2$age,theta$sp,lty=1,lwd=2)
lines(mmm2$age,theta$foi,lty=1,lwd=2)
```

## Farrington model with 2 parameters

```{r}
far2 <- "
data {
  int<lower=1> Nage;           // Number of age groups
  vector[Nage] age;            // Age vector
  int<lower=0> posi[Nage];     // Number of positive cases
  int<lower=0> ni[Nage];       // Number of trials
}

parameters {
  real<lower=0.00001> alpha1;  // Parameter alpha1
  real<lower=0.00001> alpha2;  // Parameter alpha2
  real<lower=0> tau_alpha1;    // Precision (inverse variance) of alpha1
  real<lower=0> tau_alpha2;    // Precision (inverse variance) of alpha2
  real mu_alpha1;              // Mean of normal prior for alpha1
  real mu_alpha2;              // Mean of normal prior for alpha2
}

transformed parameters {
  real<lower=0> sigma_alpha1;  // Standard deviation of alpha1
  real<lower=0> sigma_alpha2;  // Standard deviation of alpha2
 
  sigma_alpha1 = sqrt(1 / tau_alpha1);
  sigma_alpha2 = sqrt(1 / tau_alpha2);
}

model {
  vector[Nage] theta;


  // Priors
  alpha1 ~ normal(mu_alpha1, sigma_alpha1);
  alpha2 ~ normal(mu_alpha2, sigma_alpha2);
  tau_alpha1 ~ gamma(0.01, 0.01);
  tau_alpha2 ~ gamma(0.01, 0.01);
  mu_alpha1 ~ normal(0, sqrt(1 / 0.0001));
  mu_alpha2 ~ normal(0, sqrt(1 / 0.0001));

  // Likelihood
  for (i in 1:Nage) {
    real eta;  // Declare eta as a real variable
    eta = (alpha1 / alpha2) * age[i] * exp(-alpha2 * age[i]) +
          (1 / alpha2) * ((alpha1 / alpha2)) * (exp(-alpha2 * age[i]) - 1);
    theta[i] = 1 - exp(eta);
    posi[i] ~ binomial(ni[i], theta[i]);
  }

}
"
```

Sampling

```{r}
fit2 <- stan(
  model_code =  far2,  
  data = rrr,    
  chains = 4,             
  warmup = 1500,          
  iter = 5000            
)
```

Posterior

```{r}
traceplot(fit2, pars = c("alpha1", "alpha2"), inc_warmup = TRUE, nrow = 1)
```

```{r}
out2 <- print(summary(fit2)$summary)
alpha1 <- out2["alpha1",c("mean")]
alpha2 <- out2["alpha2",c("mean")]
```

Plot

```{r}
theta <- data.frame( sp = rep (0,44),
                     foi = rep (0,44))

for (i in 1:44){
  theta$sp[i] = 1-exp((alpha1 / alpha2) * rrr$age[i] * exp(-alpha2 * rrr$age[i]) +
                        (1 / alpha2) * ((alpha1 / alpha2)) * (exp(-alpha2 * rrr$age[i]) - 1));
  theta$foi[i] = (alpha1*rrr$age[i])*exp(-alpha2*rrr$age[i])
}
plot(rrr$age,rrr$posi/rrr$ni,xlim=c(0,46),cex=0.01*rrr$ni,xlab="age",ylab="proportion of seropositive",
     ylim=c(0,1),lwd=2)
lines(rrr$age,theta$sp,lty=1,lwd=2)
lines(rrr$age,theta$foi,lty=1,lwd=2)
```

# 10.3.3 Log - logistic model

```{r}
log_logistic <-"
data {
  int<lower=1> Nage;           // Number of age groups
  vector[Nage] age;            // Age vector
  int<lower=0> posi[Nage];     // Number of positive cases
  int<lower=0> ni[Nage];       // Number of trials
}

parameters {
  real<lower=0.00001> alpha1;                 // Parameter alpha1
  real alpha2;                 // Parameter alpha2
  real<lower=0> tau_alpha1;    // Precision (inverse variance) of alpha1
  real<lower=0> tau_alpha2;    // Precision (inverse variance) of alpha2
  real mu_alpha1;              // Mean of normal prior for alpha1
  real mu_alpha2;              // Mean of normal prior for alpha2
}

transformed parameters {
  real<lower=0> sigma_alpha1;  // Standard deviation of alpha1
  real<lower=0> sigma_alpha2;  // Standard deviation of alpha2
 
  sigma_alpha1 = sqrt(1 / tau_alpha1);
  sigma_alpha2 = sqrt(1 / tau_alpha2);
}

model {
  vector[Nage] theta; 
  for (i in 1:Nage) {
    theta[i] = inv_logit(alpha2 + alpha1 * log(age[i]));
  }
  // Likelihood
  for (i in 1:Nage) {
    posi[i] ~ binomial(ni[i], theta[i]);
  }
 
  // Priors
  alpha1 ~ normal(mu_alpha1, sigma_alpha1);  // Adjust these priors as needed
  alpha2 ~ normal(mu_alpha2, sigma_alpha2);  // Adjust these priors as needed
  tau_alpha1 ~ gamma(0.01,0.01);
  tau_alpha2 ~ gamma(0.01,0.01);
  mu_alpha1 ~ normal(0, sqrt(10000));
  mu_alpha2 ~ normal(0, sqrt(10000));
}
"
```

```{r}
fit3 <- stan(
  model_code = log_logistic,  
  data = rrr,    
  chains = 4,             
  warmup = 1500,          
  iter = 5000            
)
```

```{r}
traceplot(fit3, pars = c("alpha1", "alpha2"), inc_warmup = TRUE, nrow = 1)
```

```{r}
out3 <- print(summary(fit3)$summary)
alpha1 <- out3["alpha1",c("mean")]
alpha2 <- out3["alpha2",c("mean")]
```

```{r}
theta <- data.frame( sp = rep (0,44),
                     foi = rep (0,44))
```

```{r}
library(boot)
for (i in 1:44){
  theta$sp[i] = inv.logit(alpha2+alpha1*log(rrr$age[i]))
  theta$foi[i] = alpha1*exp(alpha2)*(rrr$age[i]^(alpha1-1))*(1-theta$sp[i])
}
plot(rrr$age,rrr$posi/rrr$ni,xlim=c(0,46),cex=0.01*rrr$ni,xlab="age",ylab="proportion of seropositive",
     ylim=c(0,1),lwd=2)
lines(rrr$age,theta$sp,lty=1,lwd=2)
lines(rrr$age,theta$foi,lty=1,lwd=2)
```

# 10.4.1 Hierarchical Beta/Binomial Model

Model

```{r}
beta <- "
data {
  int<lower=1> Nage;           // Number of age groups
  vector[Nage] age;            // Age vector
  array[Nage] int<lower=0> posi;     // Number of positive cases
  array[Nage] int<lower=0> ni;       // Number of trials
}

parameters {
  vector<lower=0>[Nage] alpha;
  vector<lower=0>[Nage] beta;
  ordered[Nage] pi_unconstrained;
}

transformed parameters {
  vector[Nage] pi = 0.96/(1+exp(-pi_unconstrained)); // positive ordered since pi_unconstrained is ordered, and constrained between [0,1]
}

model {
  
  for( i in 1:Nage){
  alpha[i] ~ normal(0,sqrt(1/0.001));
  beta[i] ~ normal(0,sqrt(1/0.00001));
  }
  
  pi[1] ~ beta(alpha[1],beta[1]);
  
  
  for(k in 2:(Nage-1)){
  
  pi[k] ~ beta(alpha[k],beta[k]);

  }
  pi[Nage] ~ beta(alpha[Nage],beta[Nage]);
  
  
  target += sum(-pi_unconstrained)-2*sum(log(1+exp(pi_unconstrained))); // Jacobian adjustment for parameter transformation
  
  for( i in 1:Nage){
  posi[i] ~ binomial(ni[i], pi[i]);
  }
}

generated quantities {
  vector[Nage] foi;
  
  
  foi[1]<- (pi[1]/(1-pi[1]))/1.5;
  
  for(k in 2:(Nage-1)){
  
  foi[k]<- (pi[k]-pi[k-1])/(1-pi[k]);
  
  }
  
  foi[Nage]<-(pi[Nage]-pi[Nage-1])/(1-pi[Nage]);

}

"
```

```{r}
fit4 <- stan(
  model_code = beta,  
  data = rrr,    
  chains = 4,             
  warmup = 1500,          
  iter = 5000
)
```

```{r}
all_parms <- rstan::extract(fit4)
pi_v <- all_parms$pi
outpi <- colMeans(pi_v)
foi_v <- all_parms$foi
outfoi <- colMeans(foi_v)
```

```{r}
plot(rrr$age,rrr$posi/rrr$ni,xlim=c(0,46),cex=0.01*rrr$ni,xlab="age",ylab="proportion of seropositive", ylim=c(0,1),lwd=2)
lines(rrr$age,outpi,type="s",lty=1,lwd=2,)
lines(rrr$age,outfoi,lty=1,lwd=2)
```



# 11.5 Modeling the Force of Infection Directly from Antibody Titers Using Hierarchical Mixture Models

Data

```{r,echo=FALSE}
mix1 <-read.table("D:/OUCRU/serobook/code in the book/Chapter11/mix1.txt", header=FALSE, 
                 na.strings="NA", dec=",",  strip.white=TRUE)
classify <-read.table("D:/OUCRU/serobook/code in the book/Chapter11/clasify.txt",header=FALSE,
                     na.strings="NA", dec=",",  strip.white=TRUE)

Zi<- as.numeric(as.vector(mix1$V4))
age1<-as.numeric(as.vector(mix1$V2))
pos <- as.numeric(as.vector(classify$V6))

dta <- data.frame(age1,Zi,pos)

head(dta)

page_gr <- dta %>% 
  group_by(age1) %>% 
  summarise( sp = sum(pos == 1)/(sum(pos == 1)+sum(pos == 0)))

mixdta <- list(
  age1 = as.numeric(unique(age1)),
  Zi = as.numeric(Zi),
  Nage = as.numeric(length(unique(age1))),
  agegr = as.integer(age1),
  Nsub = as.numeric(length(age1)))
lapply(mixdta, head)
```

```{r}
mixture <- "

 data {
   int<lower=0> Nsub;  // total sample size
   int<lower=0> Nage;  // number of age groups
   vector[Nsub] Zi;    // log antibody levels
   int<lower=0> agegr[Nsub];  // age group for each subject (0-indexed)
   vector[Nage] age1;  // midpoint of each age group
 }

 parameters {
   real<lower=0> delta;
   real<lower=0> mu1_y;
   real<lower=0> tau1_mu;
   real<lower=0> tau2_mu;
   real gamma0;
   real<lower=0> gamma1;
   real<lower=0> tau_gamma0;
   real<lower=0> tau_gamma1;
 }

 transformed parameters {
   real mu2_y = mu1_y + delta;
   vector[Nage] theta;
   vector[Nage] p_i;
   vector[Nage] foi;

   for (i in 1:Nage) {
     theta[i] = gamma0 + gamma1 * log(age1[i]);
     p_i[i] = 1 - exp(theta[i]) / (1 + exp(theta[i]));
     foi[i] = exp(gamma0) * gamma1 * pow(age1[i], gamma1-1) /
              (1 + exp(gamma0) * pow(age1[i], gamma1));
   }
 }

 model {
   // Priors
   mu1_y ~ uniform(0, mu2_y);
   delta ~ uniform(0, 7);
   tau1_mu ~ gamma(0.01, 0.01);
   tau2_mu ~ gamma(0.01, 0.01);
   gamma0 ~ normal(0, 1/sqrt(tau_gamma0));
   gamma1 ~ normal(0, 1/sqrt(tau_gamma1)) T[0,];
   tau_gamma0 ~ gamma(0.01, 0.01);
   tau_gamma1 ~ gamma(0.01, 0.01);
  
   // Likelihood
   for (i in 1:Nsub) {
     real mu = mu1_y * p_i[agegr[i] + 1] + mu2_y * (1 - p_i[agegr[i] + 1]);
     real tau = tau1_mu * p_i[agegr[i] + 1] + tau2_mu * (1 - p_i[agegr[i] + 1]);
     Zi[i] ~ normal(mu, 1/sqrt(tau));
   }
 }

 generated quantities {
   array[Nsub] int<lower=0, upper=1> Yi;
   for (i in 1:Nsub) {
     Yi[i] = bernoulli_rng(p_i[agegr[i] + 1]);
   }
 }
"
```

```{r}
fit55 <- stan(
  model_code = mixture,
  data = mixdta,
  chains = 4,
  warmup = 1500,
  iter = 5000
)


traceplot(fit55, pars = c("mu1_y", "mu2_y","tau1_mu","tau2_mu","delta"), inc_warmup = TRUE, nrow = 1)
out55 <- summary(fit55)$summary

all_parms <- rstan::extract(fit55)

pi <- all_parms$p_i
outpi <- colMeans(pi)
foi <- all_parms$foi
outfoi <- colMeans(foi)
plot(unique(age1),page_gr$sp,xlim=c(0,46),cex=0.01*rrr$ni,xlab="age",ylab="proportion of seropositive",
     ylim=c(0,1),lwd=2)
lines(unique(age1),1 - outpi,type="l",lty=1,lwd=2,)
lines(unique(age1),outfoi,type="l",lty=1,lwd=2,)
```


